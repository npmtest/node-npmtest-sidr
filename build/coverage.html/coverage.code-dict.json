{"/home/travis/build/npmtest/node-npmtest-sidr/test.js":"/* istanbul instrument in package npmtest_sidr */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-sidr/lib.npmtest_sidr.js":"/* istanbul instrument in package npmtest_sidr */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_sidr = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_sidr = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-sidr/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-sidr && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_sidr */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_sidr\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_sidr.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_sidr.rollup.js'] =\n            local.assetsDict['/assets.npmtest_sidr.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_sidr.__dirname + '/lib.npmtest_sidr.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-sidr/node_modules/sidr/Gruntfile.js":"/* eslint global-require:0 */\nvar babel = require('rollup-plugin-babel');\n\nmodule.exports = function(grunt) {\n\n  require('load-grunt-tasks')(grunt);\n\n  // Project configuration.\n  grunt.initConfig({\n    pkg: grunt.file.readJSON('package.json'),\n\n    banner: '/*! <%= pkg.title || pkg.name %> - v<%= pkg.version %> - ' +\n        '<%= grunt.template.today(\"yyyy-mm-dd\") %>\\n' +\n        '<%= pkg.homepage ? \" * \" + pkg.homepage + \"\\\\n\" : \"\" %>' +\n        ' * Copyright (c) 2013-<%= grunt.template.today(\"yyyy\") %> <%= pkg.author.name %>;' +\n        ' Licensed <%= pkg.license %> */\\n',\n\n    clean: {\n      dist: ['dist'],\n      cssmin: [\n        'dist/stylesheets/jquery.sidr.dark.css',\n        'dist/stylesheets/jquery.sidr.light.css'\n      ]\n    },\n\n    copy: {\n      cssmin: {\n        files: [\n          {\n            src: 'dist/stylesheets/jquery.sidr.light.css',\n            dest: 'dist/stylesheets/jquery.sidr.light.min.css'\n          },\n          {\n            src: 'dist/stylesheets/jquery.sidr.dark.css',\n            dest: 'dist/stylesheets/jquery.sidr.dark.min.css'\n          }\n        ]\n      }\n    },\n\n    uglify: {\n      options: {\n        banner: '<%= banner %>'\n      },\n      dist: {\n        files: {\n          'dist/jquery.<%= pkg.name %>.min.js': ['dist/jquery.<%= pkg.name %>.js']\n        }\n      }\n    },\n\n    eslint: {\n      options: {\n        configFile: '.eslintrc'\n      },\n      target: [\n        '*.js',\n        'src/**/*.js',\n        'spec/*.js'\n      ]\n    },\n\n    scsslint: {\n      allFiles: ['src/scss/**/*'],\n      options: {\n        bundleExec: true,\n        config: '.scss-lint.yml',\n        colorizeOutput: true\n      }\n    },\n\n    watch: {\n      js: {\n        files: ['src/jquery.sidr.js', 'src/js/*.js'],\n        tasks: 'rollup'\n      },\n      compass: {\n        files: ['src/scss/**/*.scss'],\n        tasks: ['compass:dev' ]\n      }\n    },\n\n    compass: {\n      options: {\n        sassDir: 'src/scss',\n        bundleExec: true\n      },\n      dev: {\n        options: {\n          sourcemap: true,\n          cssDir: 'dist/stylesheets',\n          outputStyle: 'expanded'\n        }\n      },\n      dist: {\n        options: {\n          sourcemap: false,\n          cssDir: 'dist/stylesheets',\n          outputStyle: 'expanded',\n          environment: 'production'\n        }\n      },\n      distmin: {\n        options: {\n          sourcemap: false,\n          cssDir: 'dist/stylesheets',\n          noLineComments: true,\n          outputStyle: 'compressed',\n          environment: 'production'\n        }\n      }\n    },\n\n    karma: {\n      unit: {\n        configFile: 'karma.conf.js',\n        singleRun: true,\n        runnerPort: 9998\n      }\n    },\n\n    codeclimate: {\n      main: {\n        options: {\n          file: 'dist/coverage/lcov.info',\n          token: process.env.CODECLIMATE_TOKEN,\n          executable: 'node_modules/codeclimate-test-reporter/bin/codeclimate.js'\n        }\n      }\n    },\n\n    connect: {\n      options: {\n          port: 9000,\n          hostname: 'localhost'\n      },\n      dist: {\n          options: {\n              open: 'http://localhost:9000/examples/index.html'\n          }\n      }\n    },\n\n    rollup: {\n      options: {\n        banner: '<%= banner %>',\n        format: 'iife',\n        globals: {\n          jquery: 'jQuery'\n        },\n        plugins: [\n          babel({\n              exclude: './node_modules/**'\n          })\n        ]\n      },\n      files: {\n        dest: 'dist/jquery.<%= pkg.name %>.js',\n        src: 'src/jquery.<%= pkg.name %>.js'\n      }\n    }\n\n  });\n\n  grunt.registerTask('lint', [\n    'eslint',\n    'scsslint'\n  ]);\n\n  grunt.registerTask('test', [\n    'karma'\n  ]);\n\n  grunt.registerTask('qa', [\n    'lint',\n    'test'\n  ]);\n\n  grunt.registerTask('build', [\n    'rollup',\n    'compass:distmin',\n    'copy:cssmin',\n    'clean:cssmin',\n    'compass:dist',\n    'uglify:dist'\n  ]);\n\n  grunt.registerTask('serve', [\n    'clean:dist',\n    'compass:dev',\n    'rollup',\n    'connect:dist',\n    'watch'\n  ]);\n\n  // Default task.\n  grunt.registerTask('default', ['clean:dist', 'qa', 'build']);\n\n  grunt.registerTask('ci', ['default', 'codeclimate']);\n\n};\n","/home/travis/build/npmtest/node-npmtest-sidr/node_modules/sidr/karma.conf.js":"/* eslint global-require:0 */\nvar babel = require('rollup-plugin-babel'),\n    istanbul = require('rollup-plugin-istanbul');\n\nmodule.exports = function (config) {\n    'use strict';\n\n    config.set({\n\n        basePath: './',\n\n        frameworks: ['mocha', 'chai', 'sinon-chai', 'jquery-1.8.3'],\n\n        files: [\n            'spec/*.spec.js'\n        ],\n\n        preprocessors: {\n            'spec/*.spec.js': ['rollup']\n        },\n\n        reporters: ['mocha', 'coverage'],\n\n        port: 9876,\n        colors: true,\n        autoWatch: false,\n        singleRun: true,\n\n        // level of logging\n        // possible values: config.LOG_DISABLE || config.LOG_ERROR || config.LOG_WARN || config.LOG_INFO || config.LOG_DEBUG\n        logLevel: config.LOG_INFO,\n\n        browsers: ['PhantomJS'],\n\n        rollupPreprocessor: {\n            rollup: {\n                plugins: [\n                    babel({\n                        presets: [\n                            require('babel-preset-es2015-rollup')\n                        ]\n                    }),\n                    istanbul({\n                        exclude: ['spec/*.spec.js']\n                    })\n                ]\n            },\n            bundle: {\n                sourceMap: 'inline'\n            }\n        },\n\n        coverageReporter: {\n            dir: 'dist/coverage',\n            includeAllSources: true,\n            reporters: [\n                {'type': 'text'},\n                {'type': 'html', subdir: 'html'},\n                {'type': 'lcov', subdir: './'}\n            ]\n        }\n    });\n};\n","/home/travis/build/npmtest/node-npmtest-sidr/node_modules/sidr/spec/execute.spec.js":"import execute from '../src/js/execute';\n\ndescribe('execute.js', () => {\n    var e = {\n        execute\n    };\n\n    delete e.execute;\n});\n","/home/travis/build/npmtest/node-npmtest-sidr/node_modules/sidr/spec/fnSidr.spec.js":"import fnSidr from '../src/js/fnSidr';\n\nvar $ = jQuery;\n\n$.fn.sidr = fnSidr;\n\ndescribe('fnSidr.js', () => {\n    describe('#fnSidr()', () => {\n        var button;\n\n        beforeEach(() => {\n            $('body').html('');\n            button = $('<a />')\n                        .appendTo($('body'));\n        });\n\n        afterEach(() => {\n            button.remove();\n        });\n\n        describe('when the sidr element does not exist', () => {\n            it('should create a sidr div', () => {\n                button.sidr();\n\n                $('#sidr').prop('tagName').should.equal('DIV');\n            });\n        });\n\n        describe('when the sidr element already exists', () => {\n            var existentSidr;\n\n            beforeEach(() => {\n                existentSidr = $('<nav />')\n                            .attr('id', 'sidr')\n                            .appendTo($('body'));\n            });\n\n            it('should use the existent element', () => {\n                button.sidr();\n\n                existentSidr.data('speed').should.equal(200);\n            });\n        });\n\n        describe('when no options are set', () => {\n            it('should set the default speed', () => {\n                button.sidr();\n\n                $('#sidr').data('speed').should.equal(200);\n            });\n            it('should set the default side', () => {\n                button.sidr();\n\n                $('#sidr').data('side').should.equal('left');\n            });\n            it('should set the default body', () => {\n                button.sidr();\n\n                $('#sidr').data('body').should.equal('body');\n            });\n            it('should set the default displace', () => {\n                button.sidr();\n\n                $('#sidr').data('displace').should.equal(true);\n            });\n            it('should set the default timing', () => {\n                button.sidr();\n\n                $('#sidr').data('timing').should.equal('ease');\n            });\n            it('should set the default method', () => {\n                button.sidr();\n\n                $('#sidr').data('method').should.equal('toggle');\n            });\n        });\n\n        describe('when options are set', () => {\n            it('should accept custom speed', () => {\n                button.sidr({\n                    speed: 500\n                });\n\n                $('#sidr').data('speed').should.equal(500);\n            });\n            it('should accept custom side', () => {\n                button.sidr({\n                    side: 'right'\n                });\n\n                $('#sidr').data('side').should.equal('right');\n            });\n            it('should accept custom body', () => {\n                button.sidr({\n                    body: '.otherclass'\n                });\n\n                $('#sidr').data('body').should.equal('.otherclass');\n            });\n            it('should accept custom displace', () => {\n                button.sidr({\n                    displace: false\n                });\n\n                $('#sidr').data('displace').should.equal(false);\n            });\n            it('should accept custom timing', () => {\n                button.sidr({\n                    timing: 'ease-in-out'\n                });\n\n                $('#sidr').data('timing').should.equal('ease-in-out');\n            });\n            it('should accept custom method', () => {\n                button.sidr({\n                    method: 'open'\n                });\n\n                $('#sidr').data('method').should.equal('open');\n            });\n        });\n    });\n});\n","/home/travis/build/npmtest/node-npmtest-sidr/node_modules/sidr/spec/helper.spec.js":"import helper from '../src/js/helper';\n\ndescribe('helper.js', () => {\n    describe('#isUrl()', () => {\n        it('should not identify a number as a URL', () => {\n            helper.isUrl(4).should.equal(false);\n        });\n        it('should not identify a non-URL string as a URL', () => {\n            helper.isUrl('http:whatever.com/yeah').should.equal(false);\n        });\n        it('should not identify an object as a URL', () => {\n            helper.isUrl({\n                foo: 'bar'\n            }).should.equal(false);\n        });\n        it('should not identify an array as a URL', () => {\n            helper.isUrl([1, 2]).should.equal(false);\n        });\n        it('should identify a URL with only a domain', () => {\n            helper.isUrl('http://whatever.com').should.equal(true);\n        });\n        it('should identify a https URL', () => {\n            helper.isUrl('https://whatever.info').should.equal(true);\n        });\n        it('should identify a URL with a long path', () => {\n            helper.isUrl('http://whatever.eus/foo/bar/hey').should.equal(true);\n        });\n        it('should identify a URL with a long path and query params', () => {\n            helper.isUrl('http://whatever.com/foo/bar/hey.html?hey=ho&me&you=ok').should.equal(true);\n        });\n        it('should identify a URL with a long path and query params and the port', () => {\n            helper.isUrl('http://whatever.com:9000/foo/bar/hey.html?hey=ho&me&you=ok').should.equal(true);\n        });\n    });\n\n    describe('#addPrefixes()', () => {\n        var $element = {};\n\n        beforeEach(() => {\n            $element.removeAttr = sinon.spy();\n            sinon.stub(helper, 'addPrefix');\n        });\n\n        afterEach(() => {\n            helper.addPrefix.restore();\n        });\n\n        it('should replace the id attribute', () => {\n            helper.addPrefixes($element);\n\n            helper.addPrefix.calledWith($element, 'id').should.equal(true);\n        });\n        it('should replace the class attribute', () => {\n            helper.addPrefixes($element);\n\n            helper.addPrefix.calledWith($element, 'class').should.equal(true);\n        });\n        it('should remove the style attribute', () => {\n            helper.addPrefixes($element);\n\n            $element.removeAttr.calledWith('style').should.equal(true);\n        });\n    });\n\n    describe('#addPrefix()', () => {\n        var $element = {};\n\n        it('should do nothing if is not a string', () => {\n            $element.attr = sinon.stub().returns(true);\n            helper.addPrefix($element, 'attribute');\n\n            $element.attr.calledOnce.should.equal(true);\n        });\n        it('should do nothing if is an empty string', () => {\n            $element.attr = sinon.stub().returns('');\n            helper.addPrefix($element, 'attribute');\n\n            $element.attr.calledOnce.should.equal(true);\n        });\n        it('should do nothing if the attribute is sidr-inner', () => {\n            $element.attr = sinon.stub().returns('sidr-inner');\n            helper.addPrefix($element, 'attribute');\n\n            $element.attr.calledOnce.should.equal(true);\n        });\n        it('should add the proper prefixes to any other string', () => {\n            $element.attr = sinon.stub().returns('myclass my-second-class');\n            helper.addPrefix($element, 'attribute');\n\n            $element.attr.calledWith('attribute', 'sidr-attribute-myclass sidr-attribute-my-second-class').should.equal(true);\n        });\n    });\n});\n","/home/travis/build/npmtest/node-npmtest-sidr/node_modules/sidr/spec/menu.spec.js":"import Menu from '../src/js/menu';\nimport status from '../src/js/status';\n\nvar $ = jQuery;\n\ndescribe('menu.js', () => {\n    var m;\n\n    describe('#constructor()', () => {\n        before(() => {\n            $('body').html('');\n            $('<div />')\n              .attr('id', 'sidr')\n              .data('speed', 'speed')\n              .data('side', 'side')\n              .data('displace', 'displace')\n              .data('timing', 'timing')\n              .data('method', 'method')\n              .data('onOpen', 'onOpen')\n              .data('onClose', 'onClose')\n              .data('onOpenEnd', 'onOpenEnd')\n              .data('onCloseEnd', 'onCloseEnd')\n              .data('body', 'body')\n              .width(200)\n              .appendTo($('body'));\n        });\n\n        it('should set the name property with the parameter passed', () => {\n            m = new Menu('sidr');\n\n            m.name.should.equal('sidr');\n        });\n        it('should set the item property with the jQuery element with id equals name', () => {\n            m = new Menu('sidr');\n\n            m.item.attr('id').should.be.equal('sidr');\n        });\n        it('should set the sidr open class that will be added to body', () => {\n            m = new Menu('sidr');\n\n            m.openClass.should.be.equal('sidr-open');\n        });\n        it('should set the menuWidth property with the other width of the menu element', () => {\n            m = new Menu('sidr');\n\n            m.menuWidth.should.be.equal(200);\n        });\n        it('should set the speed property with the speed data property of the menu element', () => {\n            m = new Menu('sidr');\n\n            m.speed.should.be.equal('speed');\n        });\n        it('should set the side property with the side data property of the menu element', () => {\n            m = new Menu('sidr');\n\n            m.side.should.be.equal('side');\n        });\n        it('should set the displace property with the displace data property of the menu element', () => {\n            m = new Menu('sidr');\n\n            m.displace.should.be.equal('displace');\n        });\n        it('should set the timing property with the timing data property of the menu element', () => {\n            m = new Menu('sidr');\n\n            m.timing.should.be.equal('timing');\n        });\n        it('should set the method property with the method data property of the menu element', () => {\n            m = new Menu('sidr');\n\n            m.method.should.be.equal('method');\n        });\n        it('should set the onOpen property with the onOpen data property of the menu element', () => {\n            m = new Menu('sidr');\n\n            m.onOpenCallback.should.be.equal('onOpen');\n        });\n        it('should set the onClose property with the onClose data property of the menu element', () => {\n            m = new Menu('sidr');\n\n            m.onCloseCallback.should.be.equal('onClose');\n        });\n        it('should set the onOpenEnd property with the onOpen data property of the menu element', () => {\n            m = new Menu('sidr');\n\n            m.onOpenEndCallback.should.be.equal('onOpenEnd');\n        });\n        it('should set the onCloseEnd property with the onClose data property of the menu element', () => {\n            m = new Menu('sidr');\n\n            m.onCloseEndCallback.should.be.equal('onCloseEnd');\n        });\n        it('should set the body property with the jquery element using the body data property of the menu element as selector', () => {\n            m = new Menu('sidr');\n\n            m.body.prop('tagName').should.be.equal('BODY');\n        });\n\n        describe('when the name is not \"sidr\"', () => {\n            before(() => {\n                $('#sidr')\n                  .attr('id', 'nosidr');\n            });\n\n            it('should set the sidr open class that will be added to body', () => {\n                m = new Menu('nosidr');\n\n                m.openClass.should.be.equal('sidr-open nosidr-open');\n            });\n        });\n    });\n\n    describe('#getAnimation()', () => {\n        var animation,\n            element;\n\n        beforeEach(() => {\n            m = new Menu('sidr');\n            m.menuWidth = 200;\n        });\n\n        describe('when is a left menu', () => {\n            beforeEach(() => {\n                m.side = 'left';\n            });\n\n            describe('and the element is the menu', () => {\n                before(() => {\n                    element = 'menu';\n                });\n\n                it('should set left property to 0 when open', () => {\n                    animation = m.getAnimation('open', element);\n\n                    animation.should.deep.equal({\n                        left: 0\n                    });\n                });\n                it('should set left property to the menuWidth when close', () => {\n                    animation = m.getAnimation('close', element);\n\n                    animation.should.deep.equal({\n                        left: '-200px'\n                    });\n                });\n            });\n\n            describe('and the element is the body', () => {\n                before(() => {\n                    element = 'body';\n                });\n\n                it('should set left property to the menuWidth when open', () => {\n                    animation = m.getAnimation('open', element);\n\n                    animation.should.deep.equal({\n                        left: '200px'\n                    });\n                });\n                it('should set left property to 0 when close', () => {\n                    animation = m.getAnimation('close', element);\n\n                    animation.should.deep.equal({\n                        left: 0\n                    });\n                });\n            });\n        });\n\n\n        describe('when is a right menu', () => {\n            beforeEach(() => {\n                m.side = 'right';\n            });\n\n            describe('and the element is the menu', () => {\n                before(() => {\n                    element = 'menu';\n                });\n\n                it('should set right property to 0 when open', () => {\n                    animation = m.getAnimation('open', element);\n\n                    animation.should.deep.equal({\n                        right: 0\n                    });\n                });\n                it('should set right property to the menuWidth when close', () => {\n                    animation = m.getAnimation('close', element);\n\n                    animation.should.deep.equal({\n                        right: '-200px'\n                    });\n                });\n            });\n\n            describe('and the element is the body', () => {\n                before(() => {\n                    element = 'body';\n                });\n\n                it('should set right property to the menuWidth when open', () => {\n                    animation = m.getAnimation('open', element);\n\n                    animation.should.deep.equal({\n                        right: '200px'\n                    });\n                });\n                it('should set right property to 0 when close', () => {\n                    animation = m.getAnimation('close', element);\n\n                    animation.should.deep.equal({\n                        right: 0\n                    });\n                });\n            });\n        });\n    });\n\n    describe('#prepareBody()', () => {\n        var type;\n\n        beforeEach(() => {\n            m = new Menu('sidr');\n        });\n\n        describe('when the menu container is not body', () => {\n            beforeEach(() => {\n                m.body = $('<div />');\n            });\n\n            it('should do nothing', () => {\n                m.prepareBody();\n\n                $('html').css('overflow-x').should.equal('visible');\n            });\n        });\n\n        describe('when the menu container is the body', () => {\n            beforeEach(() => {\n                m.body = $('body');\n            });\n\n            describe('and the menu is opening', () => {\n                beforeEach(() => {\n                    type = 'open';\n                });\n\n                it('should hide overflow-x', () => {\n                    m.prepareBody(type);\n\n                    $('html').css('overflow-x').should.equal('hidden');\n                });\n            });\n\n            describe('and the menu is closing', () => {\n                beforeEach(() => {\n                    type = 'close';\n                });\n\n                it('should restore overflow-x', () => {\n                    m.prepareBody(type);\n\n                    $('html').css('overflow-x').should.equal('visible');\n                });\n            });\n        });\n    });\n\n    describe('#move()', () => {\n        var prepareBodyStub,\n            moveBodyStub,\n            moveMenuStub;\n\n        beforeEach(() => {\n            m = new Menu('sidr');\n            status.moving = false;\n            prepareBodyStub = sinon.stub(m, 'prepareBody');\n            moveBodyStub = sinon.stub(m, 'moveBody');\n            moveMenuStub = sinon.stub(m, 'moveMenu');\n        });\n\n        afterEach(() => {\n            m.prepareBody.restore();\n            m.moveBody.restore();\n            m.moveMenu.restore();\n        });\n\n        it('should set the status to moving', () => {\n            m.move('action', 'callback');\n\n            status.moving.should.equal(true);\n        });\n\n        it('should prepare the body', () => {\n            m.move('action', 'callback');\n\n            prepareBodyStub.should.be.calledWith('action');\n        });\n\n        it('should move the body', () => {\n            m.move('action', 'callback');\n\n            moveBodyStub.should.be.calledWith('action');\n        });\n\n        it('should move the menu', () => {\n            m.move('action', 'callback');\n\n            moveMenuStub.should.be.calledWith('action', 'callback');\n        });\n    });\n\n    describe('#open()', () => {\n        var moveStub;\n\n        beforeEach(() => {\n            m = new Menu('sidr');\n            m.onOpenCallback = sinon.spy();\n            moveStub = sinon.stub(m, 'move');\n        });\n\n        describe('when the menu is already moving', () => {\n            beforeEach(() => {\n                status.moving = true;\n                m.item = $('<div />')\n                            .appendTo($('body'));\n            });\n\n            it('should not move the menu', () => {\n                m.open('callback');\n\n                moveStub.notCalled.should.equal(true);\n            });\n            it('should not call the onOpen callback', () => {\n                m.open('callback');\n\n                m.onOpenCallback.notCalled.should.equal(true);\n            });\n        });\n\n        describe('when the menu is not moving', () => {\n            beforeEach(() => {\n                status.moving = false;\n            });\n\n            describe('but is already opened', () => {\n                beforeEach(() => {\n                    status.opened = 'sidr';\n                });\n\n                it('should not move the menu', () => {\n                    m.open('callback');\n\n                    moveStub.notCalled.should.equal(true);\n                });\n                it('should not call the onOpen callback', () => {\n                    m.open('callback');\n\n                    m.onOpenCallback.notCalled.should.equal(true);\n                });\n            });\n\n            describe('and another menu is opened', () => {\n                var onCloseSpy;\n\n                beforeEach(() => {\n                    onCloseSpy = sinon.spy();\n                    status.opened = 'other';\n                    $('<div />')\n                        .attr('id', status.opened)\n                        .data({\n                            side: 'right',\n                            onClose: onCloseSpy\n                        })\n                        .appendTo($('body'));\n                });\n\n                it('should not move the menu', () => {\n                    m.open('callback');\n\n                    moveStub.notCalled.should.equal(true);\n                });\n                it('should not call the onOpen callback', () => {\n                    m.open('callback');\n\n                    m.onOpenCallback.notCalled.should.equal(true);\n                });\n            });\n\n            describe('and there is not another menu opened', () => {\n                beforeEach(() => {\n                    status.opened = false;\n                });\n\n                describe('and the menu is hidden', () => {\n                    beforeEach(() => {\n                        m.item = $('<div />')\n                                    .css('display', 'none')\n                                    .appendTo($('body'));\n                    });\n                    it('should open the menu', () => {\n                        m.open('callback');\n\n                        moveStub.should.be.calledWith('open', 'callback');\n                    });\n                    it('should call the onOpen callback', () => {\n                        m.open('callback');\n\n                        m.onOpenCallback.called.should.equal(true);\n                    });\n                });\n            });\n        });\n    });\n\n    describe('#close()', () => {\n        var moveStub;\n\n        beforeEach(() => {\n            m = new Menu('sidr');\n            m.onCloseCallback = sinon.spy();\n            moveStub = sinon.stub(m, 'move');\n        });\n\n        describe('when the menu is already moving', () => {\n            beforeEach(() => {\n                status.moving = true;\n                m.item = $('<div />')\n                            .appendTo($('body'));\n            });\n\n            it('should not move the menu', () => {\n                m.close('callback');\n\n                moveStub.notCalled.should.equal(true);\n            });\n            it('should not call the onClose callback', () => {\n                m.close('callback');\n\n                m.onCloseCallback.notCalled.should.equal(true);\n            });\n        });\n\n        describe('when the menu is not moving', () => {\n            beforeEach(() => {\n                status.moving = false;\n            });\n\n            describe('and the menu is already closed', () => {\n                beforeEach(() => {\n                    status.opened = false;\n                    m.item = $('<div />')\n                        .appendTo($('body'));\n                });\n                it('should not move the menu', () => {\n                    m.close('callback');\n\n                    moveStub.notCalled.should.equal(true);\n                });\n                it('should not call the onClose callback', () => {\n                    m.close('callback');\n\n                    m.onCloseCallback.notCalled.should.equal(true);\n                });\n            });\n\n            describe('and the menu is visible', () => {\n                beforeEach(() => {\n                    status.opened = 'sidr';\n                    m.item = $('<div />')\n                                .appendTo($('body'));\n                });\n                it('should close the menu', () => {\n                    m.close('callback');\n\n                    moveStub.should.be.calledWith('close', 'callback');\n                });\n                it('should call the onClose callback', () => {\n                    m.close('callback');\n\n                    m.onCloseCallback.called.should.equal(true);\n                });\n            });\n        });\n    });\n\n    describe('#toggle()', () => {\n        var closeStub,\n            openStub;\n\n        beforeEach(() => {\n            m = new Menu('sidr');\n            closeStub = sinon.stub(m, 'close');\n            openStub = sinon.stub(m, 'open');\n        });\n\n        afterEach(() => {\n            m.close.restore();\n            m.open.restore();\n        });\n\n        describe('when the menu is closed', () => {\n            beforeEach(() => {\n                status.opened = false;\n                m.item = $('<div />')\n                    .appendTo($('body'));\n            });\n\n            it('should open the menu', () => {\n                m.toggle('callback');\n\n                openStub.should.be.calledWith('callback');\n            });\n            it('should not close the menu', () => {\n                m.toggle('callback');\n\n                closeStub.notCalled.should.equal(true);\n            });\n        });\n\n        describe('when the menu is opened', () => {\n            beforeEach(() => {\n                status.opened = 'sidr';\n                m.item = $('<div />')\n                    .appendTo($('body'));\n            });\n\n            it('should close the menu', () => {\n                m.toggle('callback');\n\n                closeStub.should.be.calledWith('callback');\n            });\n            it('should not open the menu', () => {\n                m.toggle('callback');\n\n                openStub.notCalled.should.equal(true);\n            });\n        });\n    });\n});\n","/home/travis/build/npmtest/node-npmtest-sidr/node_modules/sidr/spec/sidr.spec.js":"import sidr from '../src/js/sidr';\n\ndescribe('sidr.js', () => {\n    var s = {\n        sidr\n    };\n\n    delete s.sidr;\n});\n","/home/travis/build/npmtest/node-npmtest-sidr/node_modules/sidr/spec/status.spec.js":"import status from '../src/js/status';\n\ndescribe('status.js', () => {\n    describe('#moving property', () => {\n        it('should exist the moving property', () => {\n            should.exist(status.moving);\n        });\n    });\n    describe('#opened property', () => {\n        it('should exist the opened property', () => {\n            should.exist(status.opened);\n        });\n    });\n});\n","/home/travis/build/npmtest/node-npmtest-sidr/node_modules/sidr/src/jquery.sidr.js":"/*\n * Sidr\n * https://github.com/artberri/sidr\n *\n * Copyright (c) 2013-2016 Alberto Varela\n * Licensed under the MIT license.\n */\n\nimport sidr from './js/sidr';\nimport fnSidr from './js/fnSidr';\n\njQuery.sidr = sidr;\njQuery.fn.sidr = fnSidr;\n","/home/travis/build/npmtest/node-npmtest-sidr/node_modules/sidr/src/js/execute.js":"import Menu from './menu';\n\nvar $ = jQuery;\n\nfunction execute(action, name, callback) {\n  var sidr = new Menu(name);\n\n  switch (action) {\n    case 'open':\n      sidr.open(callback);\n      break;\n    case 'close':\n      sidr.close(callback);\n      break;\n    case 'toggle':\n      sidr.toggle(callback);\n      break;\n    default:\n      $.error('Method ' + action + ' does not exist on jQuery.sidr');\n      break;\n  }\n}\n\nexport default execute;\n","/home/travis/build/npmtest/node-npmtest-sidr/node_modules/sidr/src/js/fnSidr.js":"import helper from './helper';\nimport status from './status';\nimport sidr from './sidr';\n\nvar $ = jQuery;\n\nfunction fillContent($sideMenu, settings) {\n  // The menu content\n  if (typeof settings.source === 'function') {\n    let newContent = settings.source(name);\n\n    $sideMenu.html(newContent);\n  } else if (typeof settings.source === 'string' && helper.isUrl(settings.source)) {\n    $.get(settings.source, function (data) {\n      $sideMenu.html(data);\n    });\n  } else if (typeof settings.source === 'string') {\n    let htmlContent = '',\n      selectors = settings.source.split(',');\n\n    $.each(selectors, function (index, element) {\n      htmlContent += '<div class=\"sidr-inner\">' + $(element).html() + '</div>';\n    });\n\n    // Renaming ids and classes\n    if (settings.renaming) {\n      let $htmlContent = $('<div />').html(htmlContent);\n\n      $htmlContent.find('*').each(function (index, element) {\n        let $element = $(element);\n\n        helper.addPrefixes($element);\n      });\n      htmlContent = $htmlContent.html();\n    }\n\n    $sideMenu.html(htmlContent);\n  } else if (settings.source !== null) {\n    $.error('Invalid Sidr Source');\n  }\n\n  return $sideMenu;\n}\n\nfunction fnSidr(options) {\n  var transitions = helper.transitions,\n    settings = $.extend({\n      name: 'sidr',             // Name for the 'sidr'\n      speed: 200,               // Accepts standard jQuery effects speeds (i.e. fast, normal or milliseconds)\n      side: 'left',             // Accepts 'left' or 'right'\n      source: null,             // Override the source of the content.\n      renaming: true,           // The ids and classes will be prepended with a prefix when loading existent content\n      body: 'body',             // Page container selector,\n      displace: true,           // Displace the body content or not\n      timing: 'ease',           // Timing function for CSS transitions\n      method: 'toggle',         // The method to call when element is clicked\n      bind: 'touchstart click', // The event(s) to trigger the menu\n      onOpen() { },             // Callback when sidr start opening\n      onClose() { },            // Callback when sidr start closing\n      onOpenEnd() { },          // Callback when sidr end opening\n      onCloseEnd() { }          // Callback when sidr end closing\n    }, options),\n    name = settings.name,\n    $sideMenu = $('#' + name);\n\n  // If the side menu do not exist create it\n  if ($sideMenu.length === 0) {\n    $sideMenu = $('<div />')\n      .attr('id', name)\n      .appendTo($('body'));\n  }\n\n  // Add transition to menu if are supported\n  if (transitions.supported) {\n    $sideMenu.css(transitions.property, settings.side + ' ' + (settings.speed / 1000) + 's ' + settings.timing);\n  }\n\n  // Adding styles and options\n  $sideMenu\n    .addClass('sidr')\n    .addClass(settings.side)\n    .data({\n      speed: settings.speed,\n      side: settings.side,\n      body: settings.body,\n      displace: settings.displace,\n      timing: settings.timing,\n      method: settings.method,\n      onOpen: settings.onOpen,\n      onClose: settings.onClose,\n      onOpenEnd: settings.onOpenEnd,\n      onCloseEnd: settings.onCloseEnd\n    });\n\n  $sideMenu = fillContent($sideMenu, settings);\n\n  return this.each(function () {\n    var $this = $(this),\n      data = $this.data('sidr'),\n      flag = false;\n\n    // If the plugin hasn't been initialized yet\n    if (!data) {\n      status.moving = false;\n      status.opened = false;\n\n      $this.data('sidr', name);\n\n      $this.bind(settings.bind, function (event) {\n        event.preventDefault();\n\n        if (!flag) {\n          flag = true;\n          sidr(settings.method, name);\n\n          setTimeout(function () {\n            flag = false;\n          }, 100);\n        }\n      });\n    }\n  });\n}\n\nexport default fnSidr;\n","/home/travis/build/npmtest/node-npmtest-sidr/node_modules/sidr/src/js/helper.js":"var helper = {\n  // Check for valids urls\n  // From : http://stackoverflow.com/questions/5717093/check-if-a-javascript-string-is-an-url\n  isUrl(str) {\n    var pattern = new RegExp('^(https?:\\\\/\\\\/)?' + // protocol\n      '((([a-z\\\\d]([a-z\\\\d-]*[a-z\\\\d])*)\\\\.?)+[a-z]{2,}|' + // domain name\n      '((\\\\d{1,3}\\\\.){3}\\\\d{1,3}))' + // OR ip (v4) address\n      '(\\\\:\\\\d+)?(\\\\/[-a-z\\\\d%_.~+]*)*' + // port and path\n      '(\\\\?[;&a-z\\\\d%_.~+=-]*)?' + // query string\n      '(\\\\#[-a-z\\\\d_]*)?$', 'i'); // fragment locator\n\n    if (pattern.test(str)) {\n      return true;\n    } else {\n      return false;\n    }\n  },\n\n  // Add sidr prefixes\n  addPrefixes($element) {\n    this.addPrefix($element, 'id');\n    this.addPrefix($element, 'class');\n    $element.removeAttr('style');\n  },\n\n  addPrefix($element, attribute) {\n    var toReplace = $element.attr(attribute);\n\n    if (typeof toReplace === 'string' && toReplace !== '' && toReplace !== 'sidr-inner') {\n      $element.attr(attribute, toReplace.replace(/([A-Za-z0-9_.\\-]+)/g, 'sidr-' + attribute + '-$1'));\n    }\n  },\n\n  // Check if transitions is supported\n  transitions: (function () {\n    var body = document.body || document.documentElement,\n      style = body.style,\n      supported = false,\n      property = 'transition';\n\n    if (property in style) {\n      supported = true;\n    } else {\n      let prefixes = ['moz', 'webkit', 'o', 'ms'],\n        prefix,\n        i;\n\n      property = property.charAt(0).toUpperCase() + property.substr(1);\n      supported = (function () {\n        for (i = 0; i < prefixes.length; i++) {\n          prefix = prefixes[i];\n          if ((prefix + property) in style) {\n            return true;\n          }\n        }\n\n        return false;\n      } ());\n      property = supported ? '-' + prefix.toLowerCase() + '-' + property.toLowerCase() : null;\n    }\n\n    return {\n      supported: supported,\n      property: property\n    };\n  } ())\n};\n\nexport default helper;\n","/home/travis/build/npmtest/node-npmtest-sidr/node_modules/sidr/src/js/menu.js":"/*eslint callback-return: 0*/\n\nimport status from './status';\nimport helper from './helper';\n\nvar $ = jQuery;\n\nconst bodyAnimationClass = 'sidr-animating',\n  openAction = 'open',\n  closeAction = 'close',\n  transitionEndEvent = 'webkitTransitionEnd otransitionend oTransitionEnd msTransitionEnd transitionend';\n\nclass Menu {\n  constructor(name) {\n    this.name = name;\n    this.item = $('#' + name);\n    this.openClass = (name === 'sidr' ? 'sidr-open' : 'sidr-open ' + name + '-open');\n    this.menuWidth = this.item.outerWidth(true);\n    this.speed = this.item.data('speed');\n    this.side = this.item.data('side');\n    this.displace = this.item.data('displace');\n    this.timing = this.item.data('timing');\n    this.method = this.item.data('method');\n    this.onOpenCallback = this.item.data('onOpen');\n    this.onCloseCallback = this.item.data('onClose');\n    this.onOpenEndCallback = this.item.data('onOpenEnd');\n    this.onCloseEndCallback = this.item.data('onCloseEnd');\n    this.body = $(this.item.data('body'));\n  }\n\n  getAnimation(action, element) {\n    var animation = {},\n      prop = this.side;\n\n    if (action === 'open' && element === 'body') {\n      animation[prop] = this.menuWidth + 'px';\n    } else if (action === 'close' && element === 'menu') {\n      animation[prop] = '-' + this.menuWidth + 'px';\n    } else {\n      animation[prop] = 0;\n    }\n\n    return animation;\n  }\n\n  prepareBody(action) {\n    var prop = (action === 'open') ? 'hidden' : '';\n\n    // Prepare page if container is body\n    if (this.body.is('body')) {\n      let $html = $('html'),\n        scrollTop = $html.scrollTop();\n\n      $html.css('overflow-x', prop).scrollTop(scrollTop);\n    }\n  }\n\n  openBody() {\n    if (this.displace) {\n      let transitions = helper.transitions,\n        $body = this.body;\n\n      if (transitions.supported) {\n        $body.css(transitions.property, this.side + ' ' + (this.speed / 1000) + 's ' + this.timing)\n          .css(this.side, 0)\n          .css({\n            width: $body.width(),\n            position: 'absolute'\n          });\n        $body.css(this.side, this.menuWidth + 'px');\n      } else {\n        let bodyAnimation = this.getAnimation(openAction, 'body');\n\n        $body.css({\n          width: $body.width(),\n          position: 'absolute'\n        }).animate(bodyAnimation, {\n          queue: false,\n          duration: this.speed\n        });\n      }\n    }\n  }\n\n  onCloseBody() {\n    var transitions = helper.transitions,\n      resetStyles = {\n        width: '',\n        position: '',\n        right: '',\n        left: ''\n      };\n\n    if (transitions.supported) {\n      resetStyles[transitions.property] = '';\n    }\n\n    this.body.css(resetStyles)\n      .unbind(transitionEndEvent);\n  }\n\n  closeBody() {\n    if (this.displace) {\n      if (helper.transitions.supported) {\n        this.body.css(this.side, 0)\n          .one(transitionEndEvent, () => {\n            this.onCloseBody();\n          });\n      } else {\n        let bodyAnimation = this.getAnimation(closeAction, 'body');\n\n        this.body.animate(bodyAnimation, {\n          queue: false,\n          duration: this.speed,\n          complete: () => {\n            this.onCloseBody();\n          }\n        });\n      }\n    }\n  }\n\n  moveBody(action) {\n    if (action === openAction) {\n      this.openBody();\n    } else {\n      this.closeBody();\n    }\n  }\n\n  onOpenMenu(callback) {\n    var name = this.name;\n\n    status.moving = false;\n    status.opened = name;\n\n    this.item.unbind(transitionEndEvent);\n\n    this.body.removeClass(bodyAnimationClass)\n      .addClass(this.openClass);\n\n    this.onOpenEndCallback();\n\n    if (typeof callback === 'function') {\n      callback(name);\n    }\n  }\n\n  openMenu(callback) {\n    var $item = this.item;\n\n    if (helper.transitions.supported) {\n      $item.css(this.side, 0)\n        .one(transitionEndEvent, () => {\n          this.onOpenMenu(callback);\n        });\n    } else {\n      let menuAnimation = this.getAnimation(openAction, 'menu');\n\n      $item.css('display', 'block').animate(menuAnimation, {\n        queue: false,\n        duration: this.speed,\n        complete: () => {\n          this.onOpenMenu(callback);\n        }\n      });\n    }\n  }\n\n  onCloseMenu(callback) {\n    this.item.css({\n      left: '',\n      right: ''\n    }).unbind(transitionEndEvent);\n    $('html').css('overflow-x', '');\n\n    status.moving = false;\n    status.opened = false;\n\n    this.body.removeClass(bodyAnimationClass)\n      .removeClass(this.openClass);\n\n    this.onCloseEndCallback();\n\n    // Callback\n    if (typeof callback === 'function') {\n      callback(name);\n    }\n  }\n\n  closeMenu(callback) {\n    var item = this.item;\n\n    if (helper.transitions.supported) {\n      item.css(this.side, '')\n        .one(transitionEndEvent, () => {\n          this.onCloseMenu(callback);\n        });\n    } else {\n      let menuAnimation = this.getAnimation(closeAction, 'menu');\n\n      item.animate(menuAnimation, {\n        queue: false,\n        duration: this.speed,\n        complete: () => {\n          this.onCloseMenu();\n        }\n      });\n    }\n  }\n\n  moveMenu(action, callback) {\n    this.body.addClass(bodyAnimationClass);\n\n    if (action === openAction) {\n      this.openMenu(callback);\n    } else {\n      this.closeMenu(callback);\n    }\n  }\n\n  move(action, callback) {\n    // Lock sidr\n    status.moving = true;\n\n    this.prepareBody(action);\n    this.moveBody(action);\n    this.moveMenu(action, callback);\n  }\n\n  open(callback) {\n    // Check if is already opened or moving\n    if (status.opened === this.name || status.moving) {\n      return;\n    }\n\n    // If another menu opened close first\n    if (status.opened !== false) {\n      let alreadyOpenedMenu = new Menu(status.opened);\n\n      alreadyOpenedMenu.close(() => {\n        this.open(callback);\n      });\n\n      return;\n    }\n\n    this.move('open', callback);\n\n    // onOpen callback\n    this.onOpenCallback();\n  }\n\n  close(callback) {\n    // Check if is already closed or moving\n    if (status.opened !== this.name || status.moving) {\n      return;\n    }\n\n    this.move('close', callback);\n\n    // onClose callback\n    this.onCloseCallback();\n  }\n\n  toggle(callback) {\n    if (status.opened === this.name) {\n      this.close(callback);\n    } else {\n      this.open(callback);\n    }\n  }\n}\n\nexport default Menu;\n","/home/travis/build/npmtest/node-npmtest-sidr/node_modules/sidr/src/js/sidr.js":"import execute from './execute';\nimport status from './status';\n\nvar i,\n  $ = jQuery,\n  publicMethods = ['open', 'close', 'toggle'],\n  methodName,\n  methods = {},\n  getMethod = function (methodName) {\n    return function (name, callback) {\n      // Check arguments\n      if (typeof name === 'function') {\n        callback = name;\n        name = 'sidr';\n      } else if (!name) {\n        name = 'sidr';\n      }\n\n      execute(methodName, name, callback);\n    };\n  };\n\nfor (i = 0; i < publicMethods.length; i++) {\n  methodName = publicMethods[i];\n  methods[methodName] = getMethod(methodName);\n}\n\nfunction sidr(method) {\n  if (method === 'status') {\n    return status;\n  } else if (methods[method]) {\n    return methods[method].apply(this, Array.prototype.slice.call(arguments, 1));\n  } else if (typeof method === 'function' || typeof method === 'string' || !method) {\n    return methods.toggle.apply(this, arguments);\n  } else {\n    $.error('Method ' + method + ' does not exist on jQuery.sidr');\n  }\n}\n\nexport default sidr;\n","/home/travis/build/npmtest/node-npmtest-sidr/node_modules/sidr/src/js/status.js":"var sidrStatus = {\n  moving: false,\n  opened: false\n};\n\nexport default sidrStatus;\n"}